<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Management Dashboard</title>
    <style>
        /* Modern Variable-Based Design System */
        :root {
            /* Color Palette */
            --primary: #3a6ea5;
            --primary-light: #5184bd;
            --primary-dark: #2a5085;
            --accent: #ff9800;
            --accent-hover: #ffb84d;
            --danger: #e74c3c;
            --danger-hover: #c0392b;
            --success: #4CAF50;
            --success-hover: #45a049;
            --gray-100: #f8f9fa;
            --gray-200: #e9ecef;
            --gray-300: #dee2e6;
            --gray-600: #6c757d;
            --gray-800: #343a40;
            --white: #ffffff;
            
            /* Spacing */
            --space-xs: 4px;
            --space-sm: 8px;
            --space-md: 16px;
            --space-lg: 24px;
            --space-xl: 32px;
            
            /* Shadows */
            --shadow-sm: 0 2px 4px rgba(0,0,0,0.05);
            --shadow-md: 0 4px 8px rgba(0,0,0,0.1);
            --shadow-lg: 0 8px 16px rgba(0,0,0,0.15);
            
            /* Border Radius */
            --radius-sm: 4px;
            --radius-md: 8px;
            --radius-lg: 12px;
            
            /* Transitions */
            --transition-fast: 0.2s ease;
            --transition-normal: 0.3s ease;
        }
        
        /* Reset & Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', 'Segoe UI', system-ui, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #f5f7fa, #e4e8f0);
            color: var(--gray-800);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            padding: var(--space-lg);
        }
        
        /* Layout */
        .dashboard {
            max-width: 1200px;
            margin: 0 auto;
            width: 100%;
        }
        
        .dashboard-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: var(--space-xl);
            flex-wrap: wrap;
            gap: var(--space-md);
        }
        
        .dashboard-title {
            color: var(--primary);
            font-size: 1.75rem;
            font-weight: 700;
        }
        
        /* Action Bar */
        .action-bar {
            display: flex;
            gap: var(--space-md);
            margin-bottom: var(--space-xl);
            flex-wrap: wrap;
        }
        
        /* Card Grid */
        .user-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: var(--space-xl);
        }
        
        /* User Card */
        .user-card {
            background: var(--white);
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow-md);
            overflow: hidden;
            transition: var(--transition-normal);
            position: relative;
        }
        
        .user-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-lg);
        }
        
        .user-card-header {
            background: var(--primary);
            color: var(--white);
            padding: var(--space-md);
            position: relative;
        }
        
        .user-card-body {
            padding: var(--space-lg);
        }
        
        .user-card-actions {
            display: flex;
            gap: var(--space-sm);
            margin-top: var(--space-lg);
        }
        
        /* User Info */
        .user-info-group {
            margin-bottom: var(--space-md);
        }
        
        .user-info-label {
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            color: var(--gray-600);
            margin-bottom: var(--space-xs);
        }
        
        .user-info-value {
            font-size: 1rem;
            font-weight: 500;
        }
        
        .password-value {
            position: relative;
            background: var(--gray-200);
            border-radius: var(--radius-sm);
            padding: var(--space-sm);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .password-dots {
            letter-spacing: 1px;
        }
        
        /* Buttons */
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: var(--space-xs);
            padding: var(--space-sm) var(--space-md);
            border-radius: var(--radius-md);
            font-weight: 600;
            font-size: 0.9rem;
            cursor: pointer;
            transition: var(--transition-fast);
            border: none;
            outline: none;
            text-decoration: none;
            white-space: nowrap;
        }
        
        .btn-primary {
            background: var(--primary);
            color: var(--white);
        }
        
        .btn-primary:hover {
            background: var(--primary-light);
        }
        
        .btn-accent {
            background: var(--accent);
            color: white;
        }
        
        .btn-accent:hover {
            background: var(--accent-hover);
        }
        
        .btn-danger {
            background: var(--danger);
            color: var(--white);
        }
        
        .btn-danger:hover {
            background: var(--danger-hover);
        }
        
        .btn-success {
            background: var(--success);
            color: var(--white);
        }
        
        .btn-success:hover {
            background: var(--success-hover);
        }
        
        .btn-sm {
            padding: var(--space-xs) var(--space-sm);
            font-size: 0.8rem;
        }
        
        .btn-icon {
            width: var(--space-xl);
            height: var(--space-xl);
            padding: 0;
            border-radius: 50%;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }
        
        /* User Role Badge */
        .role-badge {
            position: absolute;
            top: var(--space-md);
            right: var(--space-md);
            padding: var(--space-xs) var(--space-sm);
            border-radius: var(--radius-sm);
            font-size: 0.7rem;
            font-weight: 700;
            text-transform: uppercase;
            background: rgba(255,255,255,0.2);
            color: var(--white);
        }
        
        /* Empty State */
        .empty-state {
            text-align: center;
            padding: var(--space-xl);
            background: var(--white);
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow-sm);
        }
        
        .empty-state-icon {
            font-size: 3rem;
            color: var(--gray-300);
            margin-bottom: var(--space-md);
        }
        
        .empty-state-title {
            font-size: 1.5rem;
            color: var(--gray-800);
            margin-bottom: var(--space-md);
        }
        
        .empty-state-text {
            color: var(--gray-600);
            margin-bottom: var(--space-lg);
        }
        
        /* Search Bar */
        .search-container {
            position: relative;
            width: 100%;
            max-width: 400px;
        }
        
        .search-input {
            width: 100%;
            padding: var(--space-sm) var(--space-lg);
            padding-left: 40px;
            border: 1px solid var(--gray-300);
            border-radius: var(--radius-md);
            font-size: 0.9rem;
            transition: var(--transition-fast);
        }
        
        .search-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(58, 110, 165, 0.2);
        }
        
        .search-icon {
            position: absolute;
            left: var(--space-sm);
            top: 50%;
            transform: translateY(-50%);
            color: var(--gray-600);
        }
        
        /* Toast Notification */
        .toast {
            position: fixed;
            bottom: var(--space-xl);
            right: var(--space-xl);
            background: var(--white);
            border-radius: var(--radius-md);
            box-shadow: var(--shadow-lg);
            padding: var(--space-md);
            display: flex;
            align-items: center;
            gap: var(--space-md);
            min-width: 300px;
            max-width: 500px;
            transform: translateY(150%);
            transition: transform var(--transition-normal);
            z-index: 1000;
        }
        
        .toast.show {
            transform: translateY(0);
        }
        
        .toast-success {
            border-left: 4px solid var(--success);
        }
        
        .toast-error {
            border-left: 4px solid var(--danger);
        }
        
        .toast-icon {
            font-size: 1.5rem;
        }
        
        .toast-content {
            flex-grow: 1;
        }
        
        .toast-title {
            font-weight: 600;
            margin-bottom: 4px;
        }
        
        .toast-message {
            font-size: 0.9rem;
            color: var(--gray-600);
        }
        
        .toast-close {
            background: none;
            border: none;
            font-size: 1.2rem;
            cursor: pointer;
            color: var(--gray-600);
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .dashboard-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .search-container {
                max-width: 100%;
            }
            
            .action-bar {
                width: 100%;
                overflow-x: auto;
                padding-bottom: var(--space-sm);
            }
            
            .toast {
                left: var(--space-md);
                right: var(--space-md);
                max-width: calc(100% - (var(--space-md) * 2));
            }
        }
    </style>
</head>
<body>
    <div class="dashboard">
        <!-- Dashboard Header -->
        <div class="dashboard-header">
            <h1 class="dashboard-title">User Management Dashboard</h1>
            
            <!-- Search Bar -->
            <div class="search-container">
                <span class="search-icon">🔍</span>
                <input type="text" class="search-input" placeholder="Search users..." id="searchInput">
            </div>
        </div>
        
        <!-- Action Bar -->
        <div class="action-bar">
            <a href="/superadmin/addStudent" class="btn btn-primary">
                <span>👤</span> Add Student
            </a>
            <a href="/superadmin/addnewadmin" class="btn btn-primary">
                <span>👑</span> Add Admin
            </a>
            <a href="/superadmin/pc" class="btn btn-primary">
                <span>💻</span> Add PC
            </a>
            <a href="/superadmin/editpc" class="btn btn-primary">
                <span>🔧</span> Edit PC
            </a>
        </div>
        
        <!-- User Grid -->
        <div class="user-grid" id="userGrid">
            {{#each products}}
            <div class="user-card" data-id="{{this._id}}">
                <div class="user-card-header">
                    <h3>{{this.username}}</h3>
                    <span class="role-badge">Student</span>
                </div>
                <div class="user-card-body">
                    <div class="user-info-group">
                        <div class="user-info-label">Username</div>
                        <div class="user-info-value">{{this.username}}</div>
                    </div>
                    
                    <div class="user-info-group">
                        <div class="user-info-label">Password</div>
                        <div class="password-value">
                            <span class="password-dots" id="password-{{this._id}}">••••••••</span>
                            <button class="btn btn-sm" onclick="togglePassword('{{this._id}}', '{{this.password}}')" id="toggleBtn-{{this._id}}">
                                👁️
                            </button>
                        </div>
                    </div>
                    
                    <div class="user-card-actions">
                        <button class="btn btn-success" onclick="editUser('{{this._id}}')">
                            ✏️ Edit
                        </button>
                        <button class="btn btn-danger" onclick="confirmDelete('{{this._id}}', '{{this.username}}')">
                            🗑️ Delete
                        </button>
                    </div>
                </div>
            </div>
            {{/each}}
            
            <!-- Empty State (shown when no users) -->
            {{#unless products.length}}
            <div class="empty-state" style="grid-column: 1 / -1;">
                <div class="empty-state-icon">👥</div>
                <h3 class="empty-state-title">No Users Found</h3>
                <p class="empty-state-text">Get started by adding new users to the system.</p>
                <a href="/superadmin/addStudent" class="btn btn-primary">Add First User</a>
            </div>
            {{/unless}}
        </div>
    </div>
    
    <!-- Toast Notification (Hidden by default) -->
    <div class="toast" id="toast">
        <div class="toast-icon" id="toastIcon"></div>
        <div class="toast-content">
            <div class="toast-title" id="toastTitle"></div>
            <div class="toast-message" id="toastMessage"></div>
        </div>
        <button class="toast-close" onclick="hideToast()">×</button>
    </div>

    <script>
        // Search functionality
        document.getElementById('searchInput').addEventListener('input', function(e) {
            const query = e.target.value.toLowerCase();
            const cards = document.querySelectorAll('.user-card');
            
            cards.forEach(card => {
                const username = card.querySelector('.user-info-value').textContent.toLowerCase();
                if (username.includes(query)) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        });
        
        // Toggle password visibility
        function togglePassword(userId, password) {
            const passwordElem = document.getElementById(`password-${userId}`);
            const toggleBtn = document.getElementById(`toggleBtn-${userId}`);
            
            if (passwordElem.classList.contains('showing')) {
                passwordElem.textContent = '••••••••';
                passwordElem.classList.remove('showing');
                toggleBtn.textContent = '👁️';
            } else {
                passwordElem.textContent = password;
                passwordElem.classList.add('showing');
                toggleBtn.textContent = '🔒';
                
                // Auto-hide after 5 seconds for security
                setTimeout(() => {
                    if (passwordElem.classList.contains('showing')) {
                        passwordElem.textContent = '••••••••';
                        passwordElem.classList.remove('showing');
                        toggleBtn.textContent = '👁️';
                    }
                }, 5000);
            }
        }
        
        // Show toast notification
        function showToast(type, title, message) {
            const toast = document.getElementById('toast');
            const toastIcon = document.getElementById('toastIcon');
            const toastTitle = document.getElementById('toastTitle');
            const toastMessage = document.getElementById('toastMessage');
            
            // Set content
            toastTitle.textContent = title;
            toastMessage.textContent = message;
            
            // Set type
            toast.className = 'toast';
            if (type === 'success') {
                toast.classList.add('toast-success');
                toastIcon.textContent = '✅';
            } else {
                toast.classList.add('toast-error');
                toastIcon.textContent = '❌';
            }
            
            // Show toast
            setTimeout(() => {
                toast.classList.add('show');
            }, 100);
            
            // Auto hide after 4 seconds
            setTimeout(() => {
                hideToast();
            }, 4000);
        }
        
        function hideToast() {
            const toast = document.getElementById('toast');
            toast.classList.remove('show');
        }
        
        // Confirm delete with modal
        function confirmDelete(userId, username) {
            const confirmed = confirm(`Are you sure you want to delete user "${username}"? This action cannot be undone.`);
            
            if (confirmed) {
                deleteUser(userId, username);
            }
        }
        
        // Delete user
        async function deleteUser(userId, username) {
            try {
                const response = await fetch(`/superadmin/delete/${userId}`, {
                    method: 'DELETE',
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Remove the card with animation
                    const card = document.querySelector(`.user-card[data-id="${userId}"]`);
                    card.style.opacity = '0';
                    card.style.transform = 'scale(0.8)';
                    
                    setTimeout(() => {
                        card.remove();
                        
                        // Check if grid is empty
                        const remainingCards = document.querySelectorAll('.user-card').length;
                        if (remainingCards === 0) {
                            const emptyState = document.createElement('div');
                            emptyState.className = 'empty-state';
                            emptyState.style.gridColumn = '1 / -1';
                            emptyState.innerHTML = `
                                <div class="empty-state-icon">👥</div>
                                <h3 class="empty-state-title">No Users Found</h3>
                                <p class="empty-state-text">Get started by adding new users to the system.</p>
                                <a href="/superadmin/addStudent" class="btn btn-primary">Add First User</a>
                            `;
                            document.getElementById('userGrid').appendChild(emptyState);
                        }
                    }, 300);
                    
                    showToast('success', 'User Deleted', `User "${username}" has been successfully deleted.`);
                } else {
                    showToast('error', 'Delete Failed', `Failed to delete user "${username}".`);
                }
            } catch (error) {
                console.error("Error:", error);
                showToast('error', 'Server Error', 'An unexpected error occurred. Please try again.');
            }
        }
        
        // Edit user (redirect to edit page)
        function editUser(userId) {
            window.location.href = `/superadmin/edit/${userId}`;
        }
    </script>
</body>
</html>