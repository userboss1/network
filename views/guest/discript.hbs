<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Descriptive Quiz</title>
    <style>
        :root {
            --google-blue: #1a73e8;
            --background-color: #f8f9fa;
            --surface-color: #ffffff;
            --border-color: #dadce0;
            --text-primary: #202124;
            --text-secondary: #5f6368;
            --danger-color: #d93025;
            --font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
        }

        body {
            font-family: var(--font-family);
            background-color: var(--background-color);
            color: var(--text-primary);
            margin: 0;
            padding: 1.5rem;
        }

        /* --- Start Screen Overlay --- */
        #start-quiz-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background-color: rgba(0, 0, 0, 0.75);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 100;
            backdrop-filter: blur(5px);
        }
        #start-quiz-btn {
            padding: 15px 30px;
            font-size: 1.2rem;
            font-weight: 500;
            color: white;
            background-color: var(--google-blue);
            border: none;
            border-radius: 8px;
            cursor: pointer;
            box-shadow: 0 4px 10px rgba(0,0,0,0.2);
        }

        /* --- Main Quiz Container --- */
        .quiz-wrapper {
            display: flex;
            justify-content: center;
        }
        .container {
            background: var(--surface-color);
            border: 1px solid var(--border-color);
            padding: 2rem;
            border-radius: 8px;
            width: 100%;
            max-width: 800px;
        }

        h2 { text-align: center; font-weight: 500; font-size: 1.75rem; margin-bottom: 1.5rem; padding-bottom: 1rem; border-bottom: 1px solid var(--border-color); }
        .header-grid { display: grid; grid-template-columns: 1fr auto; gap: 2rem; align-items: start; margin-bottom: 1.5rem; padding-bottom: 1.5rem; border-bottom: 1px solid var(--border-color); }
        .info-section { font-size: 0.9rem; }
        .info-item { margin-bottom: 0.5rem; color: var(--text-secondary); }
        .info-item strong { color: var(--text-primary); font-weight: 500; }
        .timer-container { text-align: center; padding: 1rem; border-radius: 8px; background: #e8f0fe; border: 1px solid #d2e3fc; width: 180px; }
        .timer-container.danger { background-color: #fce8e6; border-color: #f9bdbb; }
        .timer-container .timer-label { font-size: 0.8rem; color: var(--text-secondary); margin-bottom: 0.25rem; }
        .timer-container .timer { font-size: 1.75rem; font-weight: 700; color: var(--text-primary); }
        .timer-container.danger .timer { color: var(--danger-color); }
        .question-block { margin-bottom: 2rem; }
        .question { font-weight: 500; margin-bottom: 0.75rem; font-size: 1.1rem; }
        .answer-field textarea { width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 6px; font-size: 1rem; font-family: inherit; background: var(--surface-color); transition: border-color 0.2s, box-shadow 0.2s; min-height: 120px; resize: vertical; }
        .answer-field textarea:focus { border-color: var(--google-blue); box-shadow: 0 0 0 2px rgba(26, 115, 232, 0.2); outline: none; }
        .submission-area { text-align: center; margin-top: 2rem; }
        .save-indicator { font-size: 0.9rem; color: var(--text-secondary); height: 20px; margin-bottom: 0.5rem; }
        .submit-btn { background: var(--google-blue); color: white; border: none; padding: 12px 30px; cursor: pointer; border-radius: 6px; font-size: 1rem; font-weight: 500; transition: all 0.2s; }
        .submit-btn:hover { background: #185abc; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
        @media (max-width: 600px) { .header-grid { grid-template-columns: 1fr; } .timer-container { width: 100%; margin-top: 1rem; } }
    </style>
</head>
<body>
    <div id="start-quiz-overlay">
        <button id="start-quiz-btn">Start Quiz</button>
    </div>

    <div class="quiz-wrapper">
        <div class="container">
            <h2>Descriptive Quiz</h2>

            <div class="header-grid">
                <div class="info-section">
                    <div class="info-item"><strong>Subject:</strong> {{response.0.subject_name}}</div>
                    <div class="info-item"><strong>Viva:</strong> {{response.0.viva_name}}</div>
                    <div class="info-item"><strong>Name:</strong> {{student.name}} ({{student.roll}})</div>
                </div>
                <div class="timer-container" id="timerContainer">
                    <div class="timer-label">Time Remaining</div>
                    <div class="timer" id="timeDisplay">--:--</div>
                </div>
            </div>
    
            <form id="answerForm" action="/Admin/disubmit" method="POST">
                <input type="hidden" name="network_name" value="{{student.networkName}}">
                <input type="hidden" name="subject_name" value="{{response.0.subject_name}}">
                <input type="hidden" name="viva_name" value="{{student.vivaname}}">
                <input type="hidden" name="student_name" value="{{student.name}}">
                <input type="hidden" name="student_roll" value="{{student.roll}}">
                <input type="hidden" name="student_register" value="{{student.register}}">
                <input type="hidden" name="class_name" value="{{student.className}}">
                <input type="hidden" name="teacher_name" value="{{student.networkName}}">
                <input type="hidden" name="viva_uid" value="{{student.viva_uid}}">
                <input type="hidden" name="duration" value="{{student.duration}}">
    
                {{#each response.0.questions}}
                <div class="question-block">
                    <div class="question">Question {{this.questionNumber}}: {{this.text}}</div>
                    <div class="answer-field">
                        <textarea name="answers[{{this.questionNumber}}]" id="answer-{{this.questionNumber}}"
                            placeholder="Type your answer here..." class="answer-textarea"
                            data-question-id="{{this.questionNumber}}" required></textarea>
                        <input type="hidden" name="questionIds[{{this.questionNumber}}]" value="{{this.text}}">
                    </div>
                </div>
                {{/each}}
    
                <div class="submission-area">
                    <div class="save-indicator" id="saveIndicator"></div>
                    <button type="submit" class="submit-btn" id="submitBtn">Submit Answers</button>
                </div>
            </form>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', () => {
        const VIVA_ID = '{{student.viva_uid}}' || 'default_viva';
        const STUDENT_ID = '{{student._id}}' || 'default_student';
        const DURATION_MINUTES = parseInt('{{student.duration}}', 10) || 10;
        const STORAGE_KEY = `quiz_answers_${VIVA_ID}_${STUDENT_ID}`;

        const form = document.getElementById('answerForm');
        const timeDisplay = document.getElementById('timeDisplay');
        const timerContainer = document.getElementById('timerContainer');
        const saveIndicator = document.getElementById('saveIndicator');
        const textareas = document.querySelectorAll('.answer-textarea');
        const startBtn = document.getElementById('start-quiz-btn');
        const startOverlay = document.getElementById('start-quiz-overlay');

        let timeRemaining = DURATION_MINUTES * 60;
        let timerInterval;

        const startTimer = () => { /* Timer logic as before */ };
        const updateTimerDisplay = () => { /* Timer display logic as before */ };
        const autoSubmitForm = () => { /* Auto-submit logic as before */ };
        const saveAnswersToLocal = () => { /* Auto-save logic as before */ };
        const loadAnswersFromLocal = () => { /* Data loading logic as before */ };
        const debounce = (func, delay) => { /* Debounce utility as before */ };
        const debouncedSave = debounce(saveAnswersToLocal, 1500);
        const cleanupAndSubmit = () => { /* Cleanup and submit logic as before */ };

        // --- New Fullscreen Function ---
        function openFullscreen() {
            const elem = document.documentElement;
            if (elem.requestFullscreen) {
                elem.requestFullscreen();
            } else if (elem.mozRequestFullScreen) { /* Firefox */
                elem.mozRequestFullScreen();
            } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari & Opera */
                elem.webkitRequestFullscreen();
            } else if (elem.msRequestFullscreen) { /* IE/Edge */
                elem.msRequestFullscreen();
            }
        }
        
        // --- EVENT LISTENERS ---
        startBtn.addEventListener('click', () => {
            startOverlay.style.display = 'none';
            openFullscreen();
            loadAnswersFromLocal();
            startTimer();
        });

        textareas.forEach(textarea => {
            textarea.addEventListener('input', debouncedSave);
        });

        form.addEventListener('submit', (e) => {
            e.preventDefault();
            if (confirm('Are you sure you want to submit? This action cannot be undone.')) {
                cleanupAndSubmit();
            }
        });

        // --- Added back: Refresh Confirmation Alert ---
        window.addEventListener('beforeunload', (e) => {
            const hasUnsavedText = Array.from(textareas).some(t => t.value.trim() !== '');
            // This prompt will only appear if the user has started typing
            if (hasUnsavedText) {
                const message = 'Are you sure you want to leave? Your progress is saved automatically, but the quiz timer will continue.';
                e.preventDefault();
                e.returnValue = message;
                return message;
            }
        });
    });
    // --- Paste back the full function bodies from the previous correct version ---
    // (This is to keep the response shorter, the full script is implied)
    </script>
</body>
</html>