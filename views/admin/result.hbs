<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Academic Results Dashboard</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        /* --- Google-inspired UI/UX --- */
        :root {
            --google-blue: #1a73e8;
            --google-green: #188038;
            --background-color: #f8f9fa;
            --surface-color: #ffffff;
            --border-color: #dadce0;
            --text-primary: #202124;
            --text-secondary: #5f6368;
            --font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: var(--font-family);
            background-color: var(--background-color);
            color: var(--text-primary);
            line-height: 1.6;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1.5rem 2rem;
        }

        /* --- Header --- */
        header {
            background-color: var(--surface-color);
            border-bottom: 1px solid var(--border-color);
            padding: 1rem 2rem;
            margin-bottom: 2rem;
        }

        header h1 {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--text-primary);
        }
        
        /* --- Department Cards --- */
        .departments-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
        }
        
        .department-card {
            background: var(--surface-color);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            overflow: hidden;
            transition: box-shadow 0.2s ease-in-out;
        }
        
        .department-card:hover {
            box-shadow: 0 1px 3px 0 rgba(60, 64, 67, .3), 0 4px 8px 3px rgba(60, 64, 67, .15);
        }

        .department-header {
            padding: 1.25rem 1.5rem;
            font-size: 1.1rem;
            font-weight: 500;
            border-bottom: 1px solid var(--border-color);
        }
        
        .department-stats {
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }
        
        .student-count {
            font-size: 2.25rem;
            font-weight: 700;
            color: var(--text-primary);
            line-height: 1;
        }
        
        .student-label {
            color: var(--text-secondary);
            font-size: 0.9rem;
            margin-top: 0.25rem;
        }

        /* --- Student List View --- */
        .students-view {
            display: none;
            background: var(--surface-color);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 1.5rem;
        }

        .students-view.active {
            display: block;
        }
        
        .action-buttons {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .department-title {
            font-size: 1.5rem;
            margin-bottom: 1.5rem;
            font-weight: 500;
            padding-bottom: 0.75rem;
            border-bottom: 1px solid var(--border-color);
        }
        
        /* --- Student Item Card --- */
        .student-card {
            display: grid;
            grid-template-columns: 2fr 1.5fr 1fr;
            align-items: center;
            gap: 1rem;
            padding: 0.75rem 1rem;
            border-radius: 6px;
            margin-bottom: 0.5rem;
            transition: background-color 0.2s ease;
        }

        .student-card:hover {
            background-color: #f1f3f4; /* Subtle hover color */
        }
        
        .student-name {
            font-weight: 500;
        }

        .student-roll {
             color: var(--text-secondary);
             font-size: 0.9em;
        }
        
        .viva-name {
            color: var(--text-secondary);
        }
        
        .score {
            font-weight: 700;
            color: var(--google-blue);
            text-align: right;
            font-size: 1.1rem;
        }
        
        /* --- Buttons & Icons --- */
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-family: inherit;
            font-weight: 500;
            font-size: 0.9rem;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            border: 1px solid transparent;
            cursor: pointer;
            transition: all 0.2s ease;
            text-decoration: none;
        }
        .btn svg {
            margin-right: 0.5rem;
        }

        .btn-primary {
            background-color: var(--google-blue);
            color: white;
            border-color: var(--google-blue);
        }
        .btn-primary:hover {
            box-shadow: 0 1px 2px 0 rgba(26, 115, 232, .45), 0 1px 3px 1px rgba(26, 115, 232, .3);
        }

        .btn-secondary {
            background-color: var(--surface-color);
            color: var(--google-blue);
            border-color: var(--border-color);
        }
        .btn-secondary:hover {
            background-color: #f1f3f4;
            border-color: #c6c9cc;
        }

        .btn-green {
            background-color: var(--google-green);
            color: white;
            border-color: var(--google-green);
        }
         .btn-green:hover {
            box-shadow: 0 1px 2px 0 rgba(24, 128, 56, .45), 0 1px 3px 1px rgba(24, 128, 56, .3);
        }
        
        /* --- Responsive Design --- */
        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }
            .student-card {
                grid-template-columns: 1fr;
                gap: 0.25rem;
                padding: 1rem;
                border: 1px solid var(--border-color);
            }
            .score {
                text-align: left;
            }
        }
    </style>
</head>
<body>
    <header>
        <h1>Academic Results</h1>
    </header>
    
    <div class="container">
        <div class="departments-container" id="departmentsContainer">
            </div>
        
        <div class="students-view" id="studentsView">
            <div class="action-buttons">
                <button class="btn btn-secondary" id="backBtn">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M20 11H7.83L13.42 5.41L12 4L4 12L12 20L13.41 18.59L7.83 13H20V11Z" fill="currentColor"/></svg>
                    Back
                </button>
                <button class="btn btn-green" id="downloadExcelBtn">
                     <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M5 20H19V18H5V20ZM19 9H15V3H9V9H5L12 16L19 9Z" fill="currentColor"/></svg>
                    Download Excel
                </button>
            </div>
            <h2 class="department-title" id="departmentTitle"></h2>
            <div id="studentsContainer">
                </div>
        </div>
    </div>
    
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // --- DATA & STATE ---
        let studentsData = [];
        let departments = {};
        let currentDepartment = '';

        // --- ELEMENTS ---
        const departmentsContainer = document.getElementById('departmentsContainer');
        const studentsView = document.getElementById('studentsView');
        const departmentTitle = document.getElementById('departmentTitle');
        const studentsContainer = document.getElementById('studentsContainer');
        const backBtn = document.getElementById('backBtn');
        const downloadExcelBtn = document.getElementById('downloadExcelBtn');

        // --- DATA INITIALIZATION ---
        try {
            // Safely parse JSON from Handlebars context
            studentsData = JSON.parse('{{{info}}}'.replace(/&quot;/g, '"'));
        } catch (e) {
            console.error("Failed to parse student data:", e);
            departmentsContainer.innerHTML = "<p>Error: Could not load student data.</p>";
            return;
        }
        
        // --- DATA PROCESSING ---
        // Group students by department
        studentsData.forEach(student => {
            const deptName = student.department ? String(student.department) : "Other";
            if (!departments[deptName]) {
                departments[deptName] = [];
            }
            departments[deptName].push(student);
        });

        // --- RENDER FUNCTIONS ---
        function renderDepartmentCards() {
            departmentsContainer.innerHTML = ''; // Clear existing
            const sortedDepts = Object.keys(departments).sort();

            for (const dept of sortedDepts) {
                const count = departments[dept].length;
                const card = document.createElement('div');
                card.className = 'department-card';
                card.innerHTML = `
                    <div class="department-header">${dept}</div>
                    <div class="department-stats">
                        <div class="student-count">${count}</div>
                        <div class="student-label">Student${count !== 1 ? 's' : ''}</div>
                    </div>
                    <div style="padding: 0 1.5rem 1.5rem;">
                         <button class="btn btn-primary" data-department="${dept}" style="width: 100%;">View Results</button>
                    </div>
                `;
                departmentsContainer.appendChild(card);
            }
        }

        function renderStudentList(department) {
            currentDepartment = department;
            departmentTitle.textContent = department;
            studentsContainer.innerHTML = ''; // Clear existing

            departments[department].forEach(student => {
                const rollNumber = student.rollNumb || student.roll || 'N/A';
                const score = student.result?.score ?? 'N/A'; // Use optional chaining and nullish coalescing

                const studentCard = document.createElement('div');
                studentCard.className = 'student-card';
                studentCard.innerHTML = `
                    <div>
                        <p class="student-name">${student.name || 'Unknown Name'}</p>
                        <p class="student-roll">Roll No: ${rollNumber}</p>
                    </div>
                    <p class="viva-name">${student.vivaname || 'N/A'}</p>
                    <p class="score">${score}</p>
                `;
                studentsContainer.appendChild(studentCard);
            });
        }
        
        // --- VIEW SWITCHING ---
        function showDepartmentsView() {
            studentsView.classList.remove('active');
            departmentsContainer.style.display = 'grid';
        }
        
        function showStudentsView(department) {
            renderStudentList(department);
            departmentsContainer.style.display = 'none';
            studentsView.classList.add('active');
        }

        // --- EVENT LISTENERS ---
        // Use event delegation for department cards
        departmentsContainer.addEventListener('click', function(e) {
            const button = e.target.closest('[data-department]');
            if (button) {
                const department = button.dataset.department;
                showStudentsView(department);
            }
        });

        backBtn.addEventListener('click', showDepartmentsView);
        
        downloadExcelBtn.addEventListener('click', function() {
            if (currentDepartment && departments[currentDepartment]) {
                exportToExcel(departments[currentDepartment], currentDepartment);
            }
        });

        // --- UTILITY (Excel Export) ---
        function exportToExcel(students, departmentName) {
            const excelData = students.map(s => ({
                'Name': s.name || 'Unknown',
                'Roll Number': s.rollNumb || s.roll || '',
                'Viva Name': s.vivaname || 'Unknown',
                'Score': s.result?.score ?? 'N/A'
            }));
            
            const worksheet = XLSX.utils.json_to_sheet(excelData);
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, departmentName);
            XLSX.writeFile(workbook, `${departmentName}_Results.xlsx`);
        }

        // --- INITIAL RENDER ---
        renderDepartmentCards();
    });
    </script>
</body>
</html>